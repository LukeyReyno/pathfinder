{"version":3,"sources":["Pathfinding/Tile/Tile.jsx","Algorithms/BFS.js","Pathfinding/Pathfinding.jsx","Algorithms/DFS.js","App.js","reportWebVitals.js","index.js"],"names":["Tile","props","state","this","row","col","isFinish","isStart","isObstacle","onMouseDown","onMouseUp","onMouseEnter","extraClassName","id","className","Component","breadthFirstSearch","grid","startTile","finishTile","directions","distance","queue","visitedTilesInOrder","possiblePath","queueLoop","length","current","shift","d","isVisited","push","newCoordinateX","newCoordinateY","neighbor","Infinity","results","shortestPath","pathFromStartToFinish","minNeighbor","unshift","collectPath","console","log","INITIAL_START_POS","INITIAL_FINISH_POS","DIRECTIONS","ALGORITHMS","stack","stackLoop","pop","Pathfinding","mouseIsPressed","directionsIndex","algorithmIndex","timeoutIDs","isSimulating","startPosition","finishPosition","dragStart","dragFinish","initializeGrid","setState","setUpChoice","newGrid","document","getElementById","dropDownElement","addEventListener","choice","value","target","vistedTilesInOrder","i","tID","setTimeout","tIDList","clearTimeout","j","paths","animateTraversal","animateShortestPath","onClick","visualize","resetVisualization","htmlFor","name","map","rowIndex","style","height","tile","tileIndex","handleMouseDown","handleMouseUp","handleMouseEnter","currentRow","currentTile","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f8b6943f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Tile.css'\n\nexport default class Tile extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {};\n   }\n\n   render() {\n      // Determine if properties are true, in order to add it to class name\n      const {\n         row, \n         col, \n         isFinish, \n         isStart,\n         isObstacle,\n         onMouseDown,\n         onMouseUp,\n         onMouseEnter,\n      } = this.props;\n      const extraClassName = isFinish\n         ? 'finish-tile'\n         : isStart\n         ? 'start-tile'\n         : isObstacle\n         ? 'obstacle-tile'\n         : '';\n\n      return (\n      <div \n      id={`tile-${row}-${col}`}\n      className={`tile ${extraClassName}`}\n      onMouseDown={() => onMouseDown(row, col)}\n      onMouseUp={() => onMouseUp()}\n      onMouseEnter={() => onMouseEnter(row, col)}>\n      </div>\n      )\n   }\n}\n","/*\nvar stack = [];\nstack.push(2);       // stack is now [2]\nstack.push(5);       // stack is now [2, 5]\nvar i = stack.pop(); // stack is now [2]\nalert(i);            // displays 5\n\nvar queue = [];\nqueue.push(2);         // queue is now [2]\nqueue.push(5);         // queue is now [2, 5]\nvar i = queue.shift(); // queue is now [5]\nalert(i);\n*/\n\nexport function breadthFirstSearch(grid, startTile, finishTile, directions) {\n   // Prevent terminal edge cases\n   if (!startTile || !finishTile || startTile === finishTile) {\n      return false;\n   }\n   // Potentially initialize all nodes to infinite distance\n   grid[startTile.row][startTile.col].distance = 0;\n   let queue = [startTile];\n   let visitedTilesInOrder = [];\n   let possiblePath = false;\n   queueLoop:\n   while (queue.length > 0) {\n      let current = queue.shift();\n      current.isVisited = true;\n      visitedTilesInOrder.push(current);\n      for (var d in directions) {\n         let newCoordinateX = current.col + directions[d][0];\n         let newCoordinateY = current.row + directions[d][1];\n         if (newCoordinateX >= grid[0].length || newCoordinateX < 0 || \n            newCoordinateY >= grid.length || newCoordinateY < 0) {\n            continue;\n         }\n         let neighbor = grid[newCoordinateY][newCoordinateX];\n         if (neighbor === finishTile) {\n            possiblePath = true;\n            break queueLoop;\n         }\n         if (neighbor.isObstacle) {\n            continue;\n         }\n         if (neighbor.distance === Infinity) {\n            neighbor.distance = current.distance + 1;\n            queue.push(neighbor);\n         }\n      }\n   }\n\n   //let results = returnAllDistances(grid);\n   let results = []\n   results.push(visitedTilesInOrder);\n   \n   if (possiblePath) {\n      let shortestPath = collectPath(grid, finishTile, directions);\n      results.push(shortestPath);\n   }\n   else {\n      console.log(\"yo what the\");\n      results.push([]);\n   }\n   return results;\n}\n\nfunction giveNodesInfiniteDistance(grid) {\n   for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; i < grid[0].length; j++) {\n         grid[i][j].distance = Infinity;\n      }\n   }\n}\n\nfunction collectPath(grid, finishTile, directions) {\n   let pathFromStartToFinish = [finishTile];\n   let current = finishTile;\n   while (current.distance > 0) {\n      let minNeighbor = current;\n      for (var d in directions) {\n         let newCoordinateX = current.col + directions[d][0];\n         let newCoordinateY = current.row + directions[d][1];\n         if (newCoordinateX >= grid[0].length || newCoordinateX < 0 || \n            newCoordinateY >= grid.length || newCoordinateY < 0) {\n            continue;\n         }\n         let neighbor = grid[newCoordinateY][newCoordinateX];\n         if (neighbor.isVisited && neighbor.distance < minNeighbor.distance) {\n            minNeighbor = neighbor;\n         }\n      }\n      pathFromStartToFinish.unshift(minNeighbor);\n      current = minNeighbor;\n   }\n   return pathFromStartToFinish;\n}\n\nfunction returnAllDistances(grid) {\n   let results = [];\n   for (var i = 0; i < grid.length; i++) {\n      let rowResults = [];\n      for (var j = 0; j < grid[0].length; j++) {\n         rowResults.push(grid[i][j].distance);\n      }\n      results.push(rowResults);\n   }\n   return results;\n}","import React, {Component} from \"react\";\nimport Tile from './Tile/Tile'\nimport {breadthFirstSearch} from '../Algorithms/BFS'\nimport {depthFirstSearch} from '../Algorithms/DFS'\n\nimport './Pathfinding.css';\n\nconst ROW_LENGTH = 15;\nconst COL_LENGTH = 50;\n\nconst INITIAL_START_POS = [10, 5];\nconst INITIAL_FINISH_POS = [6, 45];\n\n// Typically the same as the tile\nconst ROW_HEIGHT = \"25px\";\n\nconst VISIT_TIME_DELAY = 25; // in ms\n\nconst CARDINAL = [[1, 0], [0, 1], [-1, 0], [0, -1]];\nconst DIAGONAL = [[1, 1], [-1, 1], [-1, -1], [1, -1]];\nconst CARDINAL_DIAGONAL = [[1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1], [0, -1], [1, -1]];\nconst DIRECTIONS = [CARDINAL, DIAGONAL, CARDINAL_DIAGONAL];\n\nconst ALGORITHMS = [breadthFirstSearch, depthFirstSearch, breadthFirstSearch];\n\nexport default class Pathfinding extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         grid: [],\n         mouseIsPressed: false,\n         directionsIndex: 0,\n         algorithmIndex: 0,\n         timeoutIDs: [],\n         isSimulating: false,\n         startPosition: [],\n         finishPosition: [],\n         dragStart: false,\n         dragFinish: false,\n      };\n   }\n\n   componentDidMount() {\n      const grid = initializeGrid();\n      this.setState({grid, startPosition: INITIAL_START_POS, finishPosition: INITIAL_FINISH_POS});\n      this.setUpChoice();\n   }\n\n   handleMouseDown(row, col) {\n      if (this.state.isSimulating) return;\n      const newGrid = this.state.grid;\n      if (newGrid[row][col].isStart) {\n         this.setState({dragStart: true, mouseIsPressed: true});\n         console.log(\"down on start\");\n      } \n      else if (newGrid[row][col].isFinish) {\n         this.setState({dragFinish: true, mouseIsPressed: true});\n      }\n      else {\n         newGrid[row][col].isObstacle = !newGrid[row][col].isObstacle;\n         this.setState({grid: newGrid, mouseIsPressed: true});\n      }\n   }\n\n   handleMouseEnter(row, col) {\n      if (!this.state.mouseIsPressed || this.state.isSimulating) return;\n      const newGrid = this.state.grid;\n      if (this.state.dragStart) {\n         newGrid[this.state.startPosition[0]][this.state.startPosition[1]].isStart = false;\n         document.getElementById(`tile-${this.state.startPosition[0]}-${this.state.startPosition[1]}`).className = 'tile ';\n         this.setState({startPosition: [row, col]});\n         newGrid[row][col].isStart = true;\n         document.getElementById(`tile-${row}-${col}`).className = 'tile start-tile';\n      } \n      else if (this.state.dragFinish) {\n         newGrid[this.state.finishPosition[0]][this.state.finishPosition[1]].isFinish = false;\n         document.getElementById(`tile-${this.state.finishPosition[0]}-${this.state.finishPosition[1]}`).className = 'tile ';\n         this.setState({finishPosition: [row, col]});\n         newGrid[row][col].isFinish = true;\n         document.getElementById(`tile-${row}-${col}`).className = 'tile finish-tile';\n      }\n      else\n      {\n         newGrid[row][col].isObstacle = !newGrid[row][col].isObstacle;\n      }\n      this.setState({grid: newGrid, mouseIsPressed: true});\n   }\n   \n   handleMouseUp() {\n      this.setState({mouseIsPressed: false, dragStart: false, dragFinish: false});\n   }\n\n   setUpChoice() {\n      let dropDownElement = document.getElementById(\"directionSelection\");\n      dropDownElement.addEventListener(\"change\", (choice) => {\n         const value = choice.target.value;\n         if (value) {\n            this.setState({directionsIndex: value});\n         }\n      })\n\n      dropDownElement = document.getElementById(\"algorithmSelection\");\n      dropDownElement.addEventListener(\"change\", (choice) => {\n         const value = choice.target.value;\n         if (value) {\n            this.setState({algorithmIndex: value});\n         }\n      })\n   }\n\n   animateTraversal(vistedTilesInOrder) {\n      for (let i = 1; i < vistedTilesInOrder.length; i++) {\n         let tID = setTimeout(() => {\n            const current = vistedTilesInOrder[i];\n            document.getElementById(`tile-${current.row}-${current.col}`).className = 'tile visited-tile';\n         }, VISIT_TIME_DELAY * i);\n         let tIDList = this.state.timeoutIDs;\n         tIDList.push(tID);\n         this.setState({timeoutIDs: tIDList});\n      }\n   }\n\n   animateShortestPath(shortestPath) {\n      console.log(shortestPath);\n      for (let i = 1; i < shortestPath.length - 1; i++) {\n         const current = shortestPath[i];\n         document.getElementById(`tile-${current.row}-${current.col}`).className = 'tile shortestpath-tile';\n      }\n   }\n\n   resetVisualization() {\n      for (let i = 0; i < this.state.timeoutIDs.length; i++) {\n         clearTimeout(this.state.timeoutIDs[i]);\n      }\n      const newGrid = this.state.grid;\n      for (let i = 0; i < ROW_LENGTH; i++) {\n         for (let j = 0; j < COL_LENGTH; j++) {\n            if (newGrid[i][j].isFinish || newGrid[i][j].isStart || newGrid[i][j].isObstacle) {\n               continue;\n            }\n            if (newGrid[i][j].isVisited) {\n               newGrid[i][j].isVisited = false;\n               newGrid[i][j].distance = Infinity;\n               document.getElementById(`tile-${i}-${j}`).className = 'tile ';\n            }\n         }\n      }\n      this.setState({grid: newGrid, isSimulating: false});\n      console.log(newGrid);\n   }\n\n   visualize() {\n      this.setState({isSimulating: true});\n      const {grid, directionsIndex, algorithmIndex, startPosition, finishPosition} = this.state;\n      console.log(grid);\n      const startTile = grid[startPosition[0]][startPosition[1]];\n      const finishTile = grid[finishPosition[0]][finishPosition[1]];\n      const paths = ALGORITHMS[algorithmIndex](grid, startTile, finishTile, DIRECTIONS[directionsIndex]);\n      this.animateTraversal(paths[0]);\n      console.log(paths[1]);\n      let tID = setTimeout(() => {\n         this.animateShortestPath(paths[1]);\n      }, VISIT_TIME_DELAY * paths[0].length);\n      let tIDList = this.state.timeoutIDs;\n      tIDList.push(tID);\n      this.setState({timeoutIDs: tIDList});\n      console.log(grid);\n   }\n\n   render() {\n      const {grid} = this.state;\n\n      return (\n         <div>\n            <h1>General Path Finder Simulation</h1>\n            <button className=\"btn\" onClick={() => this.visualize()}>\n               Visualize Algorithm\n            </button>\n            <button className=\"btn\" onClick={() => this.resetVisualization()}>\n               Stop The Simulation!\n            </button>\n            <br /><br />\n            <span key=\"selectAlgorithm\" className=\"selection-block\">\n               <label htmlFor=\"algorithms\" className=\"subtitle\">Choose a Algorithm to search tiles:</label>\n               <br />\n               <select name=\"algorithms\" className=\"selection\" id=\"algorithmSelection\">\n                  <option value=\"0\">Breadth First Search</option>\n                  <option value=\"1\">Depth First Search</option>\n                  <option value=\"2\">Dijkstra's Algorithm</option>\n               </select>\n            </span>\n            <span key=\"selectDirection\" className=\"selection-block\">\n               <label htmlFor=\"directions\" className=\"subtitle\">Choose a direction to travel:</label>\n               <br />\n               <select name=\"directions\" className=\"selection\" id=\"directionSelection\">\n                  <option value=\"0\">Cardinal</option>\n                  <option value=\"1\">Diagonal</option>\n                  <option value=\"2\">Cardinal + Diagonal</option>\n               </select>\n            </span>\n            <div className=\"grid\">\n               {grid.map((row, rowIndex) => {\n                  return (\n                  <div key={rowIndex} style={{height: `${ROW_HEIGHT}`}}>\n                     {row.map((tile, tileIndex) => {\n                        const {isStart, isFinish, isObstacle} = tile;\n                        return (\n                           <Tile\n                              key={tileIndex}\n                              onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                              onMouseUp={(row, col) => this.handleMouseUp()}\n                              onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                              row={rowIndex}\n                              col={tileIndex}\n                              isStart={isStart}\n                              isFinish={isFinish}\n                              isObstacle={isObstacle}\n                              ></Tile>\n                        );\n                     })}\n                  </div>\n                  );\n               })}\n            </div>\n         </div>\n      )\n   }\n}\n\nconst initializeGrid = () => {\n   const grid = [];\n   for (let row = 0; row < ROW_LENGTH; row++) {\n      const currentRow = [];\n      for (let col = 0; col < COL_LENGTH; col++) {\n         const currentTile = {\n            row,\n            col,\n            distance: Infinity,\n            isVisited: false,\n            isStart: row === INITIAL_START_POS[0] && col === INITIAL_START_POS[1],\n            isFinish: row === INITIAL_FINISH_POS[0] && col === INITIAL_FINISH_POS[1],\n         };\n         currentRow.push(currentTile);\n      }\n      grid.push(currentRow);\n   }\n   return grid;\n}\n","/*\nvar stack = [];\nstack.push(2);       // stack is now [2]\nstack.push(5);       // stack is now [2, 5]\nvar i = stack.pop(); // stack is now [2]\nalert(i);            // displays 5\n\nvar queue = [];\nqueue.push(2);         // queue is now [2]\nqueue.push(5);         // queue is now [2, 5]\nvar i = queue.shift(); // queue is now [5]\nalert(i);\n*/\n\nexport function depthFirstSearch(grid, startTile, finishTile, directions) {\n   // Prevent terminal edge cases\n   if (!startTile || !finishTile || startTile === finishTile) {\n      return false;\n   }\n   // Potentially initialize all nodes to infinite distance\n   grid[startTile.row][startTile.col].distance = 0;\n   let stack = [startTile];\n   let visitedTilesInOrder = [];\n   let possiblePath = false;\n\n   stackLoop:\n   while (stack.length > 0) {\n      let current = stack.pop();\n      if (!current.isVisited)\n         visitedTilesInOrder.push(current);\n      current.isVisited = true;\n      for (var d in directions) {\n         let newCoordinateX = current.col + directions[d][0];\n         let newCoordinateY = current.row + directions[d][1];\n         if (newCoordinateX >= grid[0].length || newCoordinateX < 0 || \n            newCoordinateY >= grid.length || newCoordinateY < 0) {\n            continue;\n         }\n         let neighbor = grid[newCoordinateY][newCoordinateX];\n         if (neighbor === finishTile) {\n            possiblePath = true;\n            break stackLoop;\n         }\n         if (neighbor.isObstacle) {\n            continue;\n         }\n         if (!neighbor.isVisited) {\n            neighbor.distance = current.distance + 1;\n            stack.push(neighbor);\n         }\n      }\n   }\n\n   //let results = returnAllDistances(grid);\n   let results = []\n   results.push(visitedTilesInOrder);\n   \n   if (possiblePath) {\n      let shortestPath = collectPath(grid, finishTile, directions);\n      results.push(shortestPath);\n   }\n   else {\n      console.log(\"yo what the\");\n      results.push([]);\n   }\n   return results;\n}\n\nfunction giveNodesInfiniteDistance(grid) {\n   for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; i < grid[0].length; j++) {\n         grid[i][j].distance = Infinity;\n      }\n   }\n}\n\nfunction collectPath(grid, finishTile, directions) {\n   let pathFromStartToFinish = [finishTile];\n   let current = finishTile;\n   while (current.distance > 0) {\n      let minNeighbor = current;\n      for (var d in directions) {\n         let newCoordinateX = current.col + directions[d][0];\n         let newCoordinateY = current.row + directions[d][1];\n         if (newCoordinateX >= grid[0].length || newCoordinateX < 0 || \n            newCoordinateY >= grid.length || newCoordinateY < 0) {\n            continue;\n         }\n         let neighbor = grid[newCoordinateY][newCoordinateX];\n         if (neighbor.isVisited && neighbor.distance < minNeighbor.distance) {\n            minNeighbor = neighbor;\n         }\n      }\n      pathFromStartToFinish.unshift(minNeighbor);\n      current = minNeighbor;\n      current.isVisited = true;\n   }\n   return pathFromStartToFinish;\n}\n\nfunction returnAllDistances(grid) {\n   let results = [];\n   for (var i = 0; i < grid.length; i++) {\n      let rowResults = [];\n      for (var j = 0; j < grid[0].length; j++) {\n         rowResults.push(grid[i][j].distance);\n      }\n      results.push(rowResults);\n   }\n   return results;\n}","import './App.css';\nimport Pathfinding from './Pathfinding/Pathfinding';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pathfinding></Pathfinding>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}