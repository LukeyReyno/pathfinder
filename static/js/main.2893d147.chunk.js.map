{"version":3,"sources":["Pathfinding/Tile/Tile.jsx","Pathfinding/Pathfinding.jsx","Algorithms/BFS.js","App.js","reportWebVitals.js","index.js"],"names":["Tile","props","state","this","row","col","isFinish","isStart","isObstacle","onMouseDown","onMouseUp","onMouseEnter","extraClassName","id","className","Component","START_POS","FINISH_POS","DIRECTIONS","Pathfinding","grid","mouseIsPressed","directionsIndex","timeoutIDs","isSimulating","initializeGrid","setState","setUpDirectionChoice","newGrid","document","getElementById","addEventListener","choice","value","target","vistedTilesInOrder","i","tID","setTimeout","current","tIDList","push","length","shortestPath","clearTimeout","j","isVisited","distance","Infinity","paths","startTile","finishTile","directions","queue","visitedTilesInOrder","possiblePath","queueLoop","shift","d","newCoordinateX","newCoordinateY","neighbor","results","pathFromStartToFinish","minNeighbor","unshift","collectPath","console","log","breadthFirstSearch","animateTraversal","animateShortestPath","class","onClick","visualize","resetVisualization","for","name","map","rowIndex","style","height","tile","tileIndex","handleMouseDown","handleMouseUp","handleMouseEnter","currentRow","currentTile","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2893d147.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Tile.css'\n\nexport default class Tile extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {};\n   }\n\n   render() {\n      // Determine if properties are true, in order to add it to class name\n      const {\n         row, \n         col, \n         isFinish, \n         isStart,\n         isObstacle,\n         onMouseDown,\n         onMouseUp,\n         onMouseEnter,\n      } = this.props;\n      const extraClassName = isFinish\n         ? 'finish-tile'\n         : isStart\n         ? 'start-tile'\n         : isObstacle\n         ? 'obstacle-tile'\n         : '';\n\n      return (\n      <div \n      id={`tile-${row}-${col}`}\n      className={`tile ${extraClassName}`}\n      onMouseDown={() => onMouseDown(row, col)}\n      onMouseUp={() => onMouseUp()}\n      onMouseEnter={() => onMouseEnter(row, col)}>\n      </div>\n      )\n   }\n}\n","import React, {Component} from \"react\";\nimport Tile from './Tile/Tile'\nimport {breadthFirstSearch} from '../Algorithms/BFS'\n\nimport './Pathfinding.css';\n\nconst ROW_LENGTH = 15;\nconst COL_LENGTH = 50;\n\nconst START_POS = [10, 5];\nconst FINISH_POS = [6, 45];\n\n// Typically the same as the tile\nconst ROW_HEIGHT = \"25px\";\n\nconst VISIT_TIME_DELAY = 25; // in ms\n\nconst CARDINAL = [[1, 0], [0, 1], [-1, 0], [0, -1]];\nconst DIAGONAL = [[1, 1], [-1, 1], [-1, -1], [1, -1]];\nconst CARDINAL_DIAGONAL = [[1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1], [0, -1], [1, -1]];\nconst DIRECTIONS = [CARDINAL, DIAGONAL, CARDINAL_DIAGONAL];\n\nexport default class Pathfinding extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         grid: [],\n         mouseIsPressed: false,\n         directionsIndex: 0,\n         timeoutIDs: [],\n         isSimulating: false,\n      };\n   }\n\n   componentDidMount() {\n      const grid = initializeGrid();\n      this.setState({grid});\n      this.setUpDirectionChoice();\n   }\n\n   handleMouseDown(row, col) {\n      if (this.state.isSimulating) return;\n      const newGrid = this.state.grid;\n      newGrid[row][col].isObstacle = !newGrid[row][col].isObstacle;\n      this.setState({grid: newGrid, mouseIsPressed: true});\n   }\n\n   handleMouseEnter(row, col) {\n      if (!this.state.mouseIsPressed || this.state.isSimulating) return;\n      const newGrid = this.state.grid;\n      newGrid[row][col].isObstacle = !newGrid[row][col].isObstacle;\n      this.setState({grid: newGrid, mouseIsPressed: true});\n   }\n   \n   handleMouseUp() {\n      this.setState({mouseIsPressed: false});\n   }\n\n   setUpDirectionChoice() {\n      const dropDownElement = document.getElementById(\"directionSelection\");\n      dropDownElement.addEventListener(\"change\", (choice) => {\n         const value = choice.target.value;\n         if (value) {\n            this.setState({directionsIndex: value});\n         }\n      })\n   }\n\n   animateTraversal(vistedTilesInOrder) {\n      for (let i = 1; i < vistedTilesInOrder.length; i++) {\n         let tID = setTimeout(() => {\n            const current = vistedTilesInOrder[i];\n            document.getElementById(`tile-${current.row}-${current.col}`).className = 'tile visited-tile';\n         }, VISIT_TIME_DELAY * i);\n         let tIDList = this.state.timeoutIDs;\n         tIDList.push(tID);\n         this.setState({timeoutIDs: tIDList});\n      }\n   }\n\n   animateShortestPath(shortestPath) {\n      for (let i = 1; i < shortestPath.length - 1; i++) {\n         const current = shortestPath[i];\n         document.getElementById(`tile-${current.row}-${current.col}`).className = 'tile shortestpath-tile';\n      }\n   }\n\n   resetVisualization() {\n      for (let i = 0; i < this.state.timeoutIDs.length; i++) {\n         clearTimeout(this.state.timeoutIDs[i]);\n      }\n      const newGrid = this.state.grid;\n      for (let i = 0; i < newGrid.length; i++) {\n         for (let j = 0; j < newGrid[0].length; j++) {\n            if (newGrid[i][j].isFinish || newGrid[i][j].isStart || newGrid[i][j].isObstacle) {\n               continue;\n            }\n            if (newGrid[i][j].isVisited) {\n               newGrid[i][j].isVisited = false;\n               newGrid[i][j].distance = Infinity;\n               document.getElementById(`tile-${i}-${j}`).className = 'tile ';\n            }\n         }\n      }\n      this.setState({grid: newGrid, isSimulating: false});\n   }\n\n   visualize() {\n      this.setState({isSimulating: true});\n      const {grid, directionsIndex} = this.state;\n      const startTile = grid[START_POS[0]][START_POS[1]];\n      const finishTile = grid[FINISH_POS[0]][FINISH_POS[1]];\n      const paths = breadthFirstSearch(grid, startTile, finishTile, DIRECTIONS[directionsIndex]);\n      this.animateTraversal(paths[0]);\n      console.log(paths[1]);\n      let tID = setTimeout(() => {\n         this.animateShortestPath(paths[1]);\n      }, VISIT_TIME_DELAY * paths[0].length);\n      let tIDList = this.state.timeoutIDs;\n      tIDList.push(tID);\n      this.setState({timeoutIDs: tIDList});\n   }\n\n   render() {\n      const {grid} = this.state;\n\n      return (\n         <div>\n            <h1>General Path Finder Simulation</h1>\n            <button class=\"btn\" onClick={() => this.visualize()}>\n               Visualize Algorithm\n            </button>\n            <button class=\"btn\" onClick={() => this.resetVisualization()}>\n               Stop The Simulation!\n            </button>\n            <br /><br />\n            <label for=\"directions\">Choose a direction to travel:</label>\n            <br />\n            <select name=\"directions\" id=\"directionSelection\">\n               <option value=\"0\">Cardinal</option>\n               <option value=\"1\">Diagonal</option>\n               <option value=\"2\">Cardinal + Diagonal</option>\n            </select>\n            <div className=\"grid\">\n               {grid.map((row, rowIndex) => {\n                  return (\n                  <div key={rowIndex} style={{height: `${ROW_HEIGHT}`}}>\n                     {row.map((tile, tileIndex) => {\n                        const {isStart, isFinish, isObstacle} = tile;\n                        return (\n                           <Tile\n                              key={tileIndex}\n                              onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                              onMouseUp={(row, col) => this.handleMouseUp()}\n                              onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                              row={rowIndex}\n                              col={tileIndex}\n                              isStart={isStart}\n                              isFinish={isFinish}\n                              isObstacle={isObstacle}\n                              ></Tile>\n                        );\n                     })}\n                  </div>\n                  );\n               })}\n            </div>\n         </div>\n      )\n   }\n}\n\nconst initializeGrid = () => {\n   const grid = [];\n   for (let row = 0; row < ROW_LENGTH; row++) {\n      const currentRow = [];\n      for (let col = 0; col < COL_LENGTH; col++) {\n         const currentTile = {\n            row,\n            col,\n            distance: Infinity,\n            isVisited: false,\n            isStart: row === START_POS[0] && col === START_POS[1],\n            isFinish: row === FINISH_POS[0] && col === FINISH_POS[1],\n         };\n         currentRow.push(currentTile);\n      }\n      grid.push(currentRow);\n   }\n   return grid;\n}\n","/*\nvar stack = [];\nstack.push(2);       // stack is now [2]\nstack.push(5);       // stack is now [2, 5]\nvar i = stack.pop(); // stack is now [2]\nalert(i);            // displays 5\n\nvar queue = [];\nqueue.push(2);         // queue is now [2]\nqueue.push(5);         // queue is now [2, 5]\nvar i = queue.shift(); // queue is now [5]\nalert(i);\n*/\n\nexport function breadthFirstSearch(grid, startTile, finishTile, directions) {\n   // Prevent terminal edge cases\n   if (!startTile || !finishTile || startTile === finishTile) {\n      return false;\n   }\n   // Potentially initialize all nodes to infinite distance\n   grid[startTile.row][startTile.col].distance = 0;\n   let queue = [startTile];\n   let visitedTilesInOrder = [];\n   let possiblePath = false;\n   queueLoop:\n   while (queue.length > 0) {\n      let current = queue.shift();\n      current.isVisited = true;\n      visitedTilesInOrder.push(current);\n      for (var d in directions) {\n         let newCoordinateX = current.col + directions[d][0];\n         let newCoordinateY = current.row + directions[d][1];\n         if (newCoordinateX >= grid[0].length || newCoordinateX < 0 || \n            newCoordinateY >= grid.length || newCoordinateY < 0) {\n            continue;\n         }\n         let neighbor = grid[newCoordinateY][newCoordinateX];\n         if (neighbor === finishTile) {\n            possiblePath = true;\n            break queueLoop;\n         }\n         if (neighbor.isObstacle) {\n            continue;\n         }\n         if (neighbor.distance === Infinity) {\n            neighbor.distance = current.distance + 1;\n            queue.push(neighbor);\n         }\n      }\n   }\n\n   //let results = returnAllDistances(grid);\n   let results = []\n   results.push(visitedTilesInOrder);\n   \n   if (possiblePath) {\n      let shortestPath = collectPath(grid, startTile, finishTile, directions);\n      results.push(shortestPath);\n   }\n   else {\n      console.log(\"yo what the\");\n      results.push([]);\n   }\n   return results;\n}\n\nfunction giveNodesInfiniteDistance(grid) {\n   for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; i < grid[0].length; j++) {\n         grid[i][j].distance = Infinity;\n      }\n   }\n}\n\nfunction collectPath(grid, startTile, finishTile, directions) {\n   let pathFromStartToFinish = [finishTile];\n   let current = finishTile;\n   while (current.distance > 0) {\n      let minNeighbor = current;\n      for (var d in directions) {\n         let newCoordinateX = current.col + directions[d][0];\n         let newCoordinateY = current.row + directions[d][1];\n         if (newCoordinateX >= grid[0].length || newCoordinateX < 0 || \n            newCoordinateY >= grid.length || newCoordinateY < 0) {\n            continue;\n         }\n         let neighbor = grid[newCoordinateY][newCoordinateX];\n         if (neighbor.distance < minNeighbor.distance) {\n            minNeighbor = neighbor;\n         }\n      }\n      pathFromStartToFinish.unshift(minNeighbor);\n      current = minNeighbor;\n   }\n   return pathFromStartToFinish;\n}\n\nfunction returnAllDistances(grid) {\n   let results = [];\n   for (var i = 0; i < grid.length; i++) {\n      let rowResults = [];\n      for (var j = 0; j < grid[0].length; j++) {\n         rowResults.push(grid[i][j].distance);\n      }\n      results.push(rowResults);\n   }\n   return results;\n}","import './App.css';\nimport Pathfinding from './Pathfinding/Pathfinding';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pathfinding></Pathfinding>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}